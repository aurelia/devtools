name: Setup Chrome Web Store Credentials

on:
  workflow_dispatch:
    inputs:
      client_id:
        description: 'OAuth Client ID from Google Cloud Console'
        required: true
        type: string
      client_secret:
        description: 'OAuth Client Secret from Google Cloud Console'
        required: true
        type: string
      extension_id:
        description: 'Chrome Extension ID from Web Store'
        required: true
        type: string

jobs:
  setup-credentials:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Refresh Token
        id: generate_token
        run: |
          echo "🔐 Starting Chrome Web Store credential setup..."
          echo ""
          
          CLIENT_ID="${{ inputs.client_id }}"
          CLIENT_SECRET="${{ inputs.client_secret }}"
          EXTENSION_ID="${{ inputs.extension_id }}"
          
          # Start device flow
          echo "🌐 Starting OAuth device flow..."
          DEVICE_RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$CLIENT_ID" \
            -d "scope=https://www.googleapis.com/auth/chromewebstore" \
            "https://oauth2.googleapis.com/device/code")
          
          DEVICE_CODE=$(echo "$DEVICE_RESPONSE" | grep -o '"device_code":"[^"]*' | cut -d'"' -f4)
          USER_CODE=$(echo "$DEVICE_RESPONSE" | grep -o '"user_code":"[^"]*' | cut -d'"' -f4)
          VERIFICATION_URL=$(echo "$DEVICE_RESPONSE" | grep -o '"verification_url":"[^"]*' | cut -d'"' -f4)
          POLL_INTERVAL=$(echo "$DEVICE_RESPONSE" | grep -o '"interval":[0-9]*' | cut -d':' -f2)
          
          if [ -z "$DEVICE_CODE" ]; then
            echo "❌ Error: Failed to start device flow"
            echo "Response: $DEVICE_RESPONSE"
            exit 1
          fi
          
          echo ""
          echo "📱 MANUAL ACTION REQUIRED:"
          echo "=========================="
          echo "1. Open this URL in your browser: $VERIFICATION_URL"
          echo "2. Enter this code when prompted: $USER_CODE"
          echo "3. Authorize the Chrome Web Store access"
          echo ""
          echo "⏳ This workflow will wait up to 10 minutes for authorization..."
          echo ""
          
          # Poll for authorization (max 10 minutes)
          MAX_ATTEMPTS=120
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            sleep ${POLL_INTERVAL:-5}
            ATTEMPT=$((ATTEMPT + 1))
            
            TOKEN_RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "client_id=$CLIENT_ID" \
              -d "client_secret=$CLIENT_SECRET" \
              -d "device_code=$DEVICE_CODE" \
              -d "grant_type=urn:ietf:params:oauth:grant-type:device_code" \
              "https://oauth2.googleapis.com/token")
            
            if echo "$TOKEN_RESPONSE" | grep -q "access_token"; then
              echo "✅ Authorization successful!"
              break
            elif echo "$TOKEN_RESPONSE" | grep -q "authorization_pending"; then
              echo "⏳ Still waiting... (attempt $ATTEMPT/$MAX_ATTEMPTS)"
              continue
            elif echo "$TOKEN_RESPONSE" | grep -q "slow_down"; then
              POLL_INTERVAL=$((POLL_INTERVAL + 1))
              continue
            else
              echo "❌ Authorization failed or expired"
              echo "Response: $TOKEN_RESPONSE"
              exit 1
            fi
          done
          
          if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
            echo "❌ Timeout: Authorization not completed within 10 minutes"
            exit 1
          fi
          
          # Extract tokens
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
          REFRESH_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"refresh_token":"[^"]*' | cut -d'"' -f4)
          
          if [ -z "$REFRESH_TOKEN" ]; then
            echo "❌ Error: Failed to extract refresh token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "🧪 Testing Chrome Web Store API access..."
          TEST_RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://www.googleapis.com/chromewebstore/v1.1/items/$EXTENSION_ID")
          
          if echo "$TEST_RESPONSE" | grep -q "error"; then
            echo "⚠️  Warning: API test failed - verify extension ID is correct"
            echo "Response: $TEST_RESPONSE"
          else
            echo "✅ API test successful!"
          fi
          
          echo ""
          echo "🎉 Setup Complete! Add these GitHub Secrets:"
          echo "============================================="
          echo ""
          echo "CHROME_CLIENT_ID = $CLIENT_ID"
          echo "CHROME_CLIENT_SECRET = $CLIENT_SECRET"
          echo "CHROME_EXTENSION_ID = $EXTENSION_ID"  
          echo "CHROME_REFRESH_TOKEN = $REFRESH_TOKEN"
          echo ""
          echo "🔒 SECURITY NOTICE:"
          echo "These values contain sensitive credentials."
          echo "Add them to GitHub Secrets immediately and do not share them."

      - name: Output instructions
        run: |
          echo "📋 Next Steps:"
          echo "=============="
          echo "1. Go to Settings > Secrets and variables > Actions"
          echo "2. Add the 4 repository secrets shown above"
          echo "3. Test deployment using 'Deploy to Chrome Web Store' workflow"
          echo "4. Your extension is ready for automated deployment!"